section
 h1 Define Hooks

 p Similar to defining the setup and installation experience at buildtime, behavior for your application or service needs to be defined at runtime. 

 = partial "/partials/global/hook_definition"

 p The #{link_to 'reference documentation', '/docs/reference#reference-hooks'} contains the complete list of application lifecycle hooks; however, the only required hook is the <code>run</code> hook, and if you are only calling a built binary, you can specify that through a <code>pkg_svc_run</code> setting. Anything more complicated than running a binary and pointing to a local configuration file in the <code>config</code> directory will require you to create a custom <code>run</code> hook.

 h2 Scaffolding-generated Hooks

 p Scaffoldings auto-detect your application type and use that information to create <code>init</code> and <code>run</code> hooks.

 = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_init_hook"

 p The <code>run</code> hook generated by the #{current_page.data.platform} scaffolding uses the default <code>run</code> hook based on the <code>pkg_svc_run</code> setting. It executes the <code>web</code> process to bring up a web server for your application. For more information on the web process, see #{link_to 'Define Processes',"/tutorials/build-your-own/#{current_page.data.platform_short}/define-processes/"}.

 p If the default logic used in these hooks will not work for your application, you can create your own <code>init</code> and <code>run</code> hooks and place them within your <code>habitat/hooks</code> directory. User-generated plan files (such as hooks) take precedence over scaffolding-generated files. 
 
 h2 Helper functions and variables

 p Habitat provides several helper functions and variables when implementing hooks. For example, <code>pkgPathFor</code> is used to provide the root path for a package within your application's dependency tree. This is useful if your hook requires a binary or file from a dependent package.

 p For the complete list of helper functions, see #{link_to 'Handlebars Helpers','/docs/reference/#handlebars-helpers'}.

 h2 Using runtime settings  

 p Habitat allows you to reference configuration values set at runtime. These can be helpful in your hooks if you need to reference port numbers, IP addresses, or other values when performing business logic during the lifecycle of your running service.
 
 p You can use #{link_to 'runtime configuration settings','/docs/reference/#template-data'} in your hooks. These include #{link_to 'user-created configuration settings',"/tutorials/build-your-own/#{current_page.data.platform_short}/add-config/"} defined by you in your config file, or built-in values defined by Habitat. 

= link_to 'Next: Define Environment Variables', "/tutorials/build-your-own/#{current_page.data.platform_short}/define-variables/", class: 'button cta'