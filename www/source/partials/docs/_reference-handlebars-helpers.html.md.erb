# <a name="handlebars-helpers" id="handlebars-helpers" data-magellan-target="handlebars-helpers" class="anchor">Handlebars Helpers</a>

Habitat's templating flavour includes a number of useful helpers for writing configuration and hook files

* [toLowercase](#tolowercase-helper)
* [toUppercase](#touppercase-helper)
* [strReplace](#strreplace-helper)
* [pkgPathFor](#pkgpathfor-helper)
* [eachAlive](#eachalive-helper)
* [toJson](#tojson-helper)
* [toToml](#totoml-helper)
* [toYaml](#toyaml-helper)
* [strJoin](#join-helper)
* [strConcat](#concat-helper)

### toLowercase Helper

Returns the lowercase equivalent of the given string literal.

    my_value={{toLowercase "UPPER-CASE"}}

### toUppercase Helper

Returns the uppercase equivalent of the given string literal.

    my_value={{toUppercase "lower-case"}}

### strReplace Helper

Replaces all matches of a pattern within the given string literal.

    my_value={{strReplace "this is old" "old" "new"}}

This sets `my_value` to "this is new".

### pkgPathFor Helper

Returns the absolute filepath to the package directory of the package best resolved from the given package identifier. The named package must exist in the `pkg_deps` of the plan from which the template resides. The helper will return a nil string if the named package is not listed in the `pkg_deps`. As result you will always get what you expect and the template won't leak to other packages on the system.

Example Plan Contents:

    pkg_deps=("core/jre8")

Example Template:

    export JAVA_HOME={{pkgPathFor "core/jre8"}}

Example pointing to specific file in <code>core/nginx</code> package on disk:

    {{pkgPathFor "core/nginx"}}/config/fastcgi.conf

### eachAlive Helper

Iterates over a collection of members and renders the template for members that are marked alive.

    {{~#eachAlive bind.backend.members as |member|}}
    server ip {{member.sys.ip}}:{{member.cfg.port}}
    {{~/eachAlive}}

### toJson Helper

To output configuration data as JSON, you can use the `toJson` helper.

Given a default.toml that looks like:

    [web]

    [[servers]]
    host = "host-1"
    port = 4545

    [[servers]]
    host = "host-2"
    port = 3434

and a template:

    {{toJson cfg.web}}

when rendered, it will look like:

    {
      "servers": [
        {
          "host": "host-1",
          "port": 4545
        },
        {
          "host": "host-2",
          "port": 3434
        }
      ]
    }

This can be useful if you have a configuration file that is in JSON format and
has the same structure as your TOML configuration data.

### toToml Helper

The `toToml` helper can be used to output TOML.

Given a default.toml that looks like:

    [web]

    port = 80

and a template:

    {{toToml cfg.web}}

when rendered, it will look like:

    port = 80

This can be useful if you have an app that uses TOML as its configuration file
format, but may have not been designed for Habitat, and you only need certain
parts of the configuration data in the rendered TOML file.

### toYaml Helper

The `toYaml` helper can be used to output [YAML](http://yaml.org/).

Given a default.toml that looks like:

    [web]

    port = 80

and a template:

    {{toYaml cfg}}

when rendered, it will look like:

    ---
    web:
      port: 80

The helper outputs a YAML document (with a line beginning with `---`), so it
must be used to create complete documents: you cannot insert a section of YAML
into an existing YAML document with this helper.

### [strJoin](#join-helper)
The `join` helper can be used to create a string with the variables in a list with a separator specified by you. For example, where `list: ["foo", "bar", "baz"]`, `{{strJoin list ","}}` would return `"foo,bar,baz"`.

You cannot join an object (e.g. `{{strJoin web}}`), but you could join the variables in an object (e.g. `{{strJoin web.list "/"}}`).


### [strConcat](#concat-helper)
The `concat` helper can be used to connect multiple strings into one string without a separator. For example, `{{strConcat "foo" "bar" "baz"}}` would return `"foobarbaz"`.\

You cannot concatenate an object (e.g. `{{strConcat web}}`), but you could concatenate the variables in an object (e.g. `{{strConcat web.list}}`).
