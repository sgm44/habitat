section
 h1 Define Processes

 p The #{current_page.data.platform} scaffolding creates processes from commonly-bundled programs used in web applications. Each of these processes are wrapped up in a small script which sets up a suitable app environment and invokes a command. By convention, a web application using the #{current_page.data.platform} scaffolding will use the <code>web</code> process in the default implementation of the <code>run</code> hook. 
 
 pre
  code
   |
    pkg_svc_run="$pkg_prefix/bin/${pkg_name}-web"
 
 p That process resolves to the following command:

 = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_web_process"

 p A bourne shell process will also be generated and due to the process-wrapping logic, this shell session will have its <code>$PATH</code> correctly set, all appropriate environment variables set, and it will run in the app's installed root path.

 - if "#{current_page.data.platform_short}" == "ruby"
   p In addition, the Ruby scaffolding will use the detected app type to determine some of the processes to be created. For example, if your Gemfile.lock has the rake gem and a Rakefile exists in your app's root directory, a <code>rake</code> process will be generated that runs the following task:

   pre
    code
     |
      bundle exec rake

 - else
   p Unlike some other scaffoldings, the #{current_page.data.platform} scaffolding does not create additional processes based on a specific #{current_page.data.platform} application type.

 h2 Specifying Processes

 p There are two ways to customize your application's processes:

 ol
  li Use a #{link_to 'Procfile', 'https://devcenter.heroku.com/articles/procfile'} in your app's root directory
  - if "#{current_page.data.platform_short}" == "node"
    li Use the <code>scripts.start</code> entry in <code>package.json</code>
  li Setup the <code>scaffolding_process_bins</code> array in your Plan

 p It is recommended to use the Procfile strategy first as this is portable across other #{current_page.data.platform} app build and deployment solutions. If you define the same process name in multiple locations, the one defined in the <code>scaffolding_process_bins</code> array will take precedence.

 h3 Specifying Processes in a Procfile

 p You can override default processes or even add new ones by including a Procfile in your app's root directory. By convention, the web entry will be invoked by your package's <code>run</code> hook and will therefore be considered your package's main service. Additional entries will generate additional processes in your package. For example, the following Procfile will generate <code>yourapp-web</code> and <code>yourapp-release</code> processes where <i>yourapp</i> corresponds to the <code>pkg_name</code> value specified in your plan.sh.

 = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_specify_processes"

 p The scaffolding will produce the <code>your_app-web</code> and <code>your_app-release</code> processes in the resulting package under <code>$pkg_prefix/bin</code> which will be in the package's <code>$PATH</code> environment. Note that additional processes may also be generated depending on the app type support in the scaffolding.

 h3 Specifying Processes in Your Plan

 p Much like #{link_to 'adding additional environment variables',"/tutorials/build-your-own/#{current_page.data.platform_short}/define-variables/"}  through an associative array, you can override default processes or even add new ones by creating the <code>scaffolding_process_bins</code> array in your plan.sh file.
 
 p For example, let's take an app whose package name is set to "my_app" (by setting <code>pkg_name="my_app"</code> in your plan.sh):

 = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_specify_processes_plan"

 p The scaffolding will produce <code>my_app-web</code> and <code>my_app-release</code> processes in the resulting package under <code>$pkg_prefix/bin</code> which will be in the package's <code>$PATH</code> environment. 

 - if "#{current_page.data.platform_short}" == "ruby"
   p By default, the Ruby scaffolding will create the following processes for you as items in the <code>scaffolding_process_bins</code> array.

   p If Rails is detected:

   ul
    li web: bundle exec rails server -p $PORT
    li console: bundle exec rails console
    
   p If Rack is detected:

   ul
    li web: bundle exec rackup config.ru -p $PORT
    li console: bundle exec irb

   p If a Rakefile is detected:

   ul
    li rake: bundle exec rake

   p For all app types:

   ul
    li sh: sh

 = link_to 'Next: Add Configuration', "/tutorials/build-your-own/#{current_page.data.platform}/add-config/", class: 'button cta'